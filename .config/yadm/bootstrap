#!/bin/env python
# This file is a reimplementation of bootstrap-in-dir to work with scripts that
# require stdin.
# I found it easier to reimplement in Python then to fix the bash code :)
# https://github.com/TheLocehiliosan/yadm/blob/master/contrib/bootstrap/bootstrap-in-dir
import os
import sys
import subprocess
from pathlib import Path

CONFIRM_ALL = os.getenv('BS_CONFIRM_ALL', '0') in '1yYsS'


def debug(*text: str, sep: str = ' ') -> None:
    print(f'\033[30m[bootstrap] {sep.join(text)}\033[m')


def file_filter(f: Path) -> bool:
    conditions = (
        f.is_file(),
        os.access(str(f), os.R_OK | os.X_OK),
        '##' not in str(f),
        '~$' not in str(f),
    )
    return all(conditions)


BOOTSTRAP_D = Path(f'{__file__}_d')
if not BOOTSTRAP_D.exists():
    print(f"Error: bootstrap directory '{BOOTSTRAP_D}' not found", file=sys.stderr)
    sys.exit(1)


files = tuple(sorted(filter(file_filter, BOOTSTRAP_D.glob('*'))))
debug(f'Running {len(files)} scripts...')


env = os.environ
env.update({'BS_CONFIRM_ALL': '1' if CONFIRM_ALL else '0'})

for file in files:
    try:
        debug(f"Running '{file.name.partition('.')[0]}'...")
        if subprocess.call(str(file), env=env):
            print(f"\nError: bootstrap '{file}' failed", file=sys.stderr)
            sys.exit(1)
    except KeyboardInterrupt:
        sys.exit(0)
    print()
